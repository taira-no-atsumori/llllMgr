name: CI - Build and Deploy

on:
  push:

jobs:
  # Job 1: コミットメッセージに基づいてバージョンを更新する
  update-version:
    # mainブランチとbackupブランチ以外へのプッシュで実行
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/backup'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write # GitHub Actions変数の操作権限を追加
      id-token: write # 認証のために必要

    # このジョブの実行結果（新しいバージョン番号）を他のジョブに渡すために outputs を定義
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Get current version and calculate next version
        id: version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # GitHub Variablesから現在のバージョンを読み込む (なければ '0.0.0' を使用)
          CURRENT_VERSION=$(gh variable get SITEVERSION) || CURRENT_VERSION="0.0.0"
          if [[ "$CURRENT_VERSION" == "0.0.0" ]]; then
            echo "SITEVERSION variable not found or is '0.0.0'. Using default: 0.0.0"
          fi

          echo "Current version from variable: $CURRENT_VERSION"
          echo "Commit message: $COMMIT_MSG"

          # コミットメッセージのプレフィックスに基づいて更新レベルを決定
          level="patch"
          if [[ "$COMMIT_MSG" == major* ]]; then
            level="major"
          elif [[ "$COMMIT_MSG" == minor* ]]; then
            level="minor"
          fi
          echo "Update level: $level"

          # npx経由でsemverを使い、バージョンをインクリメント
          NEW_VERSION=$(npx semver -i $level $CURRENT_VERSION)

          echo "New version: $NEW_VERSION"

          # 後続のジョブで使えるように出力に設定
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update GitHub repository variable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          # GitHub APIを直接使用して変数を更新
          curl -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables/SITEVERSION" \
            -d "{\"name\":\"SITEVERSION\",\"value\":\"$NEW_VERSION\"}"

      - name: Update .env.public file and commit
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          # .env.publicファイルが存在するか確認し、なければエラーを出して終了
          if [ ! -f .env.public ]; then
            echo "::error::.env.publicファイルが見つかりません。リポジトリのルートに作成してください。"
            exit 1
          fi

          # .env.publicファイル内に VITE_SITEVERSION が存在するか確認
          if grep -q "^VITE_SITEVERSION=" .env.public; then
            # 存在すれば、行全体を新しいバージョンで置換
            sed -i "s/^VITE_SITEVERSION=.*/VITE_SITEVERSION='$NEW_VERSION'/" .env.public
          else
            # 存在しなければ、ファイルの末尾に追記
            echo "" >> .env.public
            echo "VITE_SITEVERSION='$NEW_VERSION'" >> .env.public
          fi

          echo "Updated .env.public file content:"
          cat .env.public

          # Gitのユーザー情報を設定
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # 変更をステージングし、差分があればコミットしてプッシュ
          git add .env.public
          git diff --staged --quiet || git commit -m "chore(version): set version to $NEW_VERSION [skip ci]"
          git push

  # Job 2: アプリケーションをビルドし、mainブランチの場合はGitHub Pagesにデプロイする
  build-and-deploy:
    # `update-version` ジョブを待つ。
    # `if: always()` を設定することで、`update-version`がスキップされた場合(mainブランチ以外)でもこのジョブを実行する
    needs: update-version
    if: always()
    runs-on: ubuntu-latest
    permissions:
      # デプロイステップ(peaceiris/actions-gh-pages)で必要
      # ビルドのみの場合は contents: read だけで十分
      contents: read # チェックアウトのみのため read で十分
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm install

      - name: Build project
        env:
          # mainブランチの場合は `update-version` ジョブから渡された新しいバージョンを使用
          # それ以外のブランチでは、`needs`コンテキストが空のため、フォールバック値 'dev-build' を使用
          VITE_SITEVERSION: ${{ needs.update-version.outputs.new_version || 'dev-build' }}
          VITE_DROPBOX_TOKEN: ${{ secrets.DROPBOX_TOKEN }}
        run: npm run build

      - name: Deploy to GitHub Pages
        # `update-version` ジョブが成功した場合にのみ(つまりmainブランチの場合にのみ)実行する
        # `needs.update-version.result` は 'success', 'failure', 'cancelled', 'skipped' のいずれかになる
        if: needs.update-version.result == 'success'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
